reinterpret_cast
Приведение типов без проверки. reinterpret_cast — непосредственное указание компилятору. Применяется только в случае полной уверенности программиста в собственных действиях. Не снимает константность и volatile. применяется для приведения указателя к указателю, указателя к целому и наоборот.
Однако операция reinterpret_cast не позволяет делать вообще все что угодно. Например, можно привести тип указателя к целочисленному типу, которыйдостаточно велик, чтобы хранить указатель, но нельзя привести указатель к меньшему целомутипу или к типу с плавающей точкой. Существует еще одно ограничение: нельзяпривести указатель на функцию к указателю на данные и наоборот.

DYNAMIC_CAST
We use dynamic_cast to handle polymorphism. dynamic_cast can convert pointers and references to any polymorphic type at run-time, primarily to cast down a type's inheritance hierarchy. If dynamic_cast can't find the desired type in the inheritance hierarchy, it will return nullptr for pointers or throw a std::bad_cast exception for references.


CONST_CAST
Пожалуй самое простое приведение типов. Снимает cv qualifiers — const и volatile, то есть константность и отказ от оптимизации компилятором переменной. Это преобразование проверяется на уровне компиляции и в случае ошибки приведения типов будет выдано сообщение.
Типы слева и справа от const_cast могут отличаться ТОЛЬКО cv-модификаторами, в остальном это должен быть один и тот же тип. Иначе будет ошибка компиляции.
РАБОТАЕТ ТОЛЬКО С УКАЗАТЕЛЯМИ И ССЫЛКАМИ. У обычных типов cv не меняет!
const_cast adds or removes const from a variable. Strangely enough, you can also use const_cast to add or remove volatile from a variable. 

STATIC_CAST
static_cast поддерживает преобразование численных типов, указателей и ссылок по иерархии наследования как вверх, так и вниз. Если некий пользовательский тип Т1, никак не связанный наследованием с типом Т2, попытаться статик-кастовать друг к другу, то будет ошибка компиляции. Проверка производится на уровне компиляции, так что в случае ошибки сообщение будет получено в момент сборки приложения или библиотеки.

daaar ef